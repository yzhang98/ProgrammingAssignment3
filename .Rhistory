getwd()
getwd()
?setwd
setwd("D:/MyWork/R")
getwd
getwd()
dir()
ls()
y = c(1.7, "a")
y
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
x <- list(2, a)
x <- list(2, "a")
x[[1]]
class(x[[1]])
attributes(x[[1]])
attributes(x)
class(x)
hw1 = read.csv("D:\MyWork\Coursera\RProg\week1\hw1_data.csv", header = T)
hw1 = read.csv("D:\\MyWork\\Coursera\\RProg\\week1\\hw1_data.csv", header = T)
summary(hw1)
hw1[2,]
hw1[1:2,]
length(hw1[,1])
dim(hw1)
length[-2:,]
hw1[-2:,]
hw1[-2:-1,]
summary(hw1)
hw1_sub = hw1[hw1$Ozone > 31 & hw1$Temp > 90, ]
hw1_sub
cor(hw1)
cor(hw1)
?cor
cor(hw1, na.rm = T)
cor(hw1, use = "complete.obs")
summary(hw1_sub)
average(hw1[Month == 6,])
mean(hw1[Month == 6,])
mean(hw1[hw1$Month == 6,])
mean(hw1[hw1$Month == 6,]$Temp)
max(hw1[hw1$Month == 5, ]$Ozone)
?max
max(hw1[hw1$Month == 5, ]$Ozone, na.rm = T)
y <- data.frame(a=1, b="a")
dput(y)
dput(y, file="y.R")
new.y <- dget("y.R")
new.y
x = "foo"
y = data.frame(a=1, b="a")
dump(c("x", "y"))
dump(c("x", "y"), file = dumpXY.R)
dump(c("x", "y"), file = "dumpXY.R")
rm(x,y)
source("dumpXY.R")
y
x
file
str(file)
con <- url("https://www.google.com", "r")
x <- readLines(con)
head(x)
summary(x)
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
seq_len(2)
x = c("a", "bc", "d")
for(e in x) print(e)
summary(airquality)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("OZone", "Solar.R", "Wind", "Temp")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", "Temp")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", "Temp")], na.rm = T))
lapply(s, function(x) length(x[, c("Ozone", "Solar.R", "Wind", "Temp")], na.rm = T))
?length
lapply(s, function(x) sum(!is.na(x[, c("Ozone", "Solar.R", "Wind", "Temp")]))
)
lapply(s, function(x) sum(!is.na(x[, c("Ozone", "Solar.R", "Wind", "Temp")])))
?colMeans
lapply(s, function(x) colSums(!is.na(x[, c("Ozone", "Solar.R", "Wind", "Temp")])))
sapply(s, function(x) colMeans(!is.na(x[, c("Ozone", "Solar.R", "Wind", "Temp")])))
sapply(s, function(x) colSums(!is.na(x[, c("Ozone", "Solar.R", "Wind", "Temp")])))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", "Temp")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", "Temp")]), na.rm = T)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", "Temp")], na.rm = T)
)
?fl
?gl
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
summary(interaction(f1, f2))
x <- rnorm(10)
split(x, list(f1, f2))
split(x, list(f1, f2), drop = T)
?lapply
lapply(split(x, list(f1, f2), drop = T), mean)
lapply(split(x, list(f1, f2), drop = T), sum)
sapply(split(x, list(f1, f2), drop = T), sum)
class(sapply(split(x, list(f1, f2), drop = T), sum))
s <- sapply(split(x, list(f1, f2), drop = T), sum)
attributes(s)
typeof(s)
sapply(s)
sapply(s, class)
?sapply
str(s)
?str
library(datasets)
data("iris")
?iris
summary(iris)
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
?apply
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
h = tapply(mtcars$hp, mtcars$cyl, mean)
h$8 - h$4
h$"8" - h$"4"
h["8"] - h["4"]
h[3]-h[1]
str(str)
str(lm)
x <- norm(100, 2, 4)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
str(iris)
f <- gl(40, 10)
str(f)
summary(f)
head(airquality)
str(airquality)
str(h)
m <- matrix(rnorm(100), 10, 10)
str(m)
s <- split(airquality, airquality$Month)
str(s)
summary(s)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(6)
rnorm(5)
rpois(10, 1)
rpois(10, 2)
ppois(2, 2)
ppois(4, 2)
ppois(6, 2)
set.seed(20)
x <- rnorm(20)
e <- rnorm(0, 2)
y <- 0.5 + 2 * x + e
class(y)
str(y)
y
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
str(y)
plot(x, y)
summary(y)
x <- rbinom(100, 1, 0.5)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x, y)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)
sample(1:10, replace = T)
system.time(readLines("http://www.jhsph.edu"))
system.teim({})
system.time({
n <- 1000
r <- numeric(n)
for( i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
})
set.seed(1)
rpois(5, 2)
?qpois
qpois(0.01, 1)
qpois(1, 1)
qpois(2, 1)
qpois(0.5, 1)
qpois(0.8, 1)
ppois(0.5, 1)
getwd()
setwd("D:/MyWork/R/RPrograming/Assignment3")
getwd()
ls()
?ls
getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
'ca' %in% c('ca', 'bb')
'ca' %in% c('cd', 'bb')
?stop
?which.min
which.min(c(1,2,0, 4))
which.min(c(1,2,0, 4, NA))
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
best("TX", "heart attack")
getwd()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
best("TX", "heart attack")
View(outcome)
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
best("TX", "heart attack")
debugSource('D:/MyWork/R/RPrograming/Assignment3/best.R')
best("TX", "heart attack")
View(outcome.data)
table(c("a", "b", "a"))
?unique
unique(c("a", "b", "a"))
debugSource('D:/MyWork/R/RPrograming/Assignment3/best.R')
best("TX", "heart attack")
View(outcome.data.state)
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
best("TX", "heart failure")
?as.numeric
best("MD", "heart attack")
best("MD", "penumonia")
best("BB", "heart attack")
best("NY", "hert attack")
?na.rm
?sort
?order
x = data.frame(a = 1:4, b = c(4, 3, 2, 1))
x
x[order[x$a],]
x[order[x[,1]],]
x[order(x[,1]),]
x[order(x[,2]),]
x <- rbind(x, c(NA, 1))
x
x <- rbind(x, c(2, NA)
)
x
x[order(x[,2]),]
x[order(x[,2], na.last = NA), ]
?last
?nrow
nrow(x)
source('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
debugSource('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
View(outcome.data.state)
View(ods.sorted)
debugSource('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
debugSource('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
install.packages("RUnit")
library(RUnit)
?RUnit
checkEquals(c("abc"), c("abc"))
?checkEquals
checkEquals(c("abc"), c("abc"), mmsg = "Not equal")
checkEquals(c("abc"), c("abcd"), mmsg = "Not equal")
checkEquals(c("abc"), c("abc"), msg = "Not equal")
checkEquals(c("abc"), c("abcd"), msg = "Not equal")
checkEquals(c("abc"), c("abcd"))
checkEquals(c("abc"), c("abc", "d"))
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
checkException(best("BB", "heart attack"))
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
warnings()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
unitTest_rankhospital()
source('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
unitTest_rankhospital()
source('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
unitTest_rankhospital()
source('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
unitTest_rankhospital()
source('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
head(rankall("heart attack", 20), 10)
?data.frame
source('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
head(rankall("heart attack", 20), 10)
warnings()
?rowbind
?rbind
debugSource('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
head(rankall("heart attack", 20), 10)
View(rankall)
?unique
source('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("penumonia", "worst"), 3)
?data.frame
source('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
tail(rankall("penumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
check1 <- head(rankall("heart attack", 20), 10)
check1
dput(check1, "rankall_check1.R")
check2 <-  tail(rankall("penumonia", "worst"), 3)
dput(check2, "rankall_check2.R")
check3 <- tail(rankall("heart failure"), 10)
dput(check3, "rankall_check3.R")
source('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
unitTest_rankall()
source('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
unitTest_rankall()
unitTest_rankhospital()
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
source('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
unitTest_rankhospital()
source('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
head(rankall("heart attack"), 10)
head(rankall("heart attack"), 20)
head(rankall("heart attack",2), 20)
unitTest_rankall()
unitTest_best()
unitTest_rankhospital()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
best("NY", "pneumonia")
source('D:/MyWork/R/RPrograming/Assignment3/best.R')
unitTest_best()
submit()
submit()
best("NN", "pneumonia")
sort(unique(outome[, 7]))
states <- sort(unique(outcome[, 7]))
states
submit()
source('D:/MyWork/R/RPrograming/Assignment3/rankhospital.R')
unitTest_rankhospital()
submit()
submit()
submit()
submit()
submit()
submit()
source('D:/MyWork/R/RPrograming/Assignment3/rankall.R')
unitTest_rankall()
submit()
